/*
 * Created by SharpDevelop.
 * User: Alexander Petrovskiy
 * Date: 17/02/2012
 * Time: 07:48 p.m.
 * 
 * To change this template use Tools | Options | Coding | Edit Standard Headers.
 */

namespace Tmx
{
    using System;
    using System.Collections.Generic;
    using System.Management.Automation;
//    using System.ComponentModel;
    using System.Linq;
	using Tmx.Interfaces;
	using Tmx.Interfaces.TestStructure;
	
    public delegate void TmxStructureChangedEventHandler(object sender, EventArgs e);
    public delegate void TmxDatabaseOperationCompletedEventHandler(object sender, EventArgs e);
    
    /// <summary>
    /// Description of TestSuitesCollection.
    /// </summary>
    // 20141014
    public static class TestData
    // public class TestData
    {
        // ----------------- Variables ---------------------------
        
        public const string TestStateNotTested = "NOT TESTED";
        public const string TestStatePassed = "PASSED";
        public const string TestStateFailed = "FAILED";
        public const string TestStateKnownIssue = "KNOWN ISSUE";
        
        public const string Autogenerated = "autogenerated";
        public const string DefaultPlatformName = "default platform";
        public const string DefaultPlatformId = "1";
        
        // 20141014
        static TestData()
        // public TestData()
        {
            TestSuites = new List<ITestSuite>();
            TestPlatforms = new List<ITestPlatform>();
            AddDefaultPlatform();
        }
        
        
        // ----------------- Properties --------------------------
        
        // 20140720
        public static List<ITestSuite> TestSuites {get; internal set; }

        public static ITestSuite CurrentTestSuite { get; set; }
        public static ITestScenario CurrentTestScenario { get; set; }
        public static ITestResult CurrentTestResult { get; set; } // ?? rewrite as the last item of the collection ??
        public static ITestCase CurrentTestCase { get; set; }
        public static List<ITestPlatform> TestPlatforms {get; internal set; }
        public static ITestPlatform CurrentTestPlatform { get; set; }
        public static ITestResult LastTestResult // ?? rewrite as setting the previous on creating the current ??
        {
            get {
                ITestResult testResult = null;
                if (null != TestSuites && 0 < TestSuites.Count) {
                    
                    int suiteNumber = TestSuites.Count - 1;
                    
                    if (null != TestSuites[suiteNumber].TestScenarios &&
                        0 < TestSuites[suiteNumber].TestScenarios.Count) {
                        
                        int scenarioNumber = TestSuites[TestSuites.Count -1].TestScenarios.Count - 1;
                        
                        if (null != TestSuites[suiteNumber].TestScenarios[scenarioNumber].TestResults &&
                            0 < TestSuites[suiteNumber].TestScenarios[scenarioNumber].TestResults.Count) {
                            
                        testResult = TestSuites[suiteNumber].TestScenarios[scenarioNumber].TestResults[
                                TestSuites[suiteNumber].TestScenarios[scenarioNumber].TestResults.Count - 1];
                        }
                    }
                }
                
                return testResult;
            }
        }
        
        public static IDatabase CurrentStructureDB { get; set; }
        public static IDatabase CurrentRepositoryDB { get; set; }
        public static IDatabase CurrentResultsDB { get; set; }
        
        // ------------------ Events -----------------------------
        public static event TmxStructureChangedEventHandler TmxNewTestSuiteCreated;
        public static event TmxStructureChangedEventHandler TmxTestSuiteOpened;
        public static event TmxStructureChangedEventHandler TmxNewTestScenarioAdded;
        public static event TmxStructureChangedEventHandler TmxTestScenarioOpened;
        public static event TmxStructureChangedEventHandler TmxNewTestResultClosed;
        public static event TmxStructureChangedEventHandler TmxNewTestResultDetailAdded;
        public static event TmxStructureChangedEventHandler TmxNewTestPlatformCreated;
        
        public static event TmxDatabaseOperationCompletedEventHandler TmxBackUpTestResultsCompleted;
        public static event TmxDatabaseOperationCompletedEventHandler TmxRestoreTestResultsCompleted;
        
        public static event TmxDatabaseOperationCompletedEventHandler TmxTestBucketAdded;
        public static event TmxDatabaseOperationCompletedEventHandler TmxTestBucketRemoved;
        public static event TmxDatabaseOperationCompletedEventHandler TmxTestBucketChanged;
        
        public static event TmxDatabaseOperationCompletedEventHandler TmxTestConstantAdded;
        public static event TmxDatabaseOperationCompletedEventHandler TmxTestConstantRemoved;
        public static event TmxDatabaseOperationCompletedEventHandler TmxTestConstantChanged;
        
        public static event TmxDatabaseOperationCompletedEventHandler TmxTestCaseAdded;
        public static event TmxDatabaseOperationCompletedEventHandler TmxTestCaseRemoved;
        public static event TmxDatabaseOperationCompletedEventHandler TmxTestCaseChanged;
        
        internal static void OnTmxNewTestSuiteCreated(object sender, EventArgs e) 
        {
			if (TmxNewTestSuiteCreated != null)
				TmxNewTestSuiteCreated(sender, e);
        }
        
        internal static void OnTmxTestSuiteOpened(object sender, EventArgs e) 
        {
            if (TmxTestSuiteOpened != null)
                TmxTestSuiteOpened(sender, e);
        }
        
        internal static void OnTmxNewTestScenarioAdded(object sender, EventArgs e) 
        {
            if (TmxNewTestScenarioAdded != null)
                TmxNewTestScenarioAdded(sender, e);
        }
        
        internal static void OnTmxTestScenarioOpened(object sender, EventArgs e) 
        {
            if (TmxTestScenarioOpened != null)
                TmxTestScenarioOpened(sender, e);
        }
        
        internal static void OnTmxNewTestResultClosed(object sender, EventArgs e) 
        {
            if (TmxNewTestResultClosed != null)
                TmxNewTestResultClosed(sender, e);
        }
        
        internal static void OnTmxNewTestResultDetailAdded(object sender, EventArgs e) 
        {
            if (TmxNewTestResultDetailAdded != null)
                TmxNewTestResultDetailAdded(sender, e);
        }
        
        internal static void OnTmxBackUpTestResultsCompleted(object sender, EventArgs e) 
        {
            if (TmxBackUpTestResultsCompleted != null)
                TmxBackUpTestResultsCompleted(sender, e);
        }
        
        internal static void OnTmxRestoreTestResultsCompleted(object sender, EventArgs e) 
        {
            if (TmxRestoreTestResultsCompleted != null)
                TmxRestoreTestResultsCompleted(sender, e);
        }
        
        internal static void OnTmxNewTestPlatformCreated(object sender, EventArgs e) 
        {
            if (TmxNewTestPlatformCreated != null)
                TmxNewTestPlatformCreated(sender, e);
        }
        
        internal static void OnTmxTestBucketAdded(object sender, EventArgs e) 
        {
            if (TmxTestBucketAdded != null)
                TmxTestBucketAdded(sender, e);
        }
        
        internal static void OnTmxTestBucketRemoved(object sender, EventArgs e) 
        {
            if (TmxTestBucketRemoved != null)
                TmxTestBucketRemoved(sender, e);
        }
        
        internal static void OnTmxTestBucketChanged(object sender, EventArgs e) 
        {
            if (TmxTestBucketChanged != null)
                TmxTestBucketChanged(sender, e);
        }
        
        internal static void OnTmxTestConstantAdded(object sender, EventArgs e) 
        {
            if (TmxTestConstantAdded != null)
                TmxTestConstantAdded(sender, e);
        }
        
        internal static void OnTmxTestConstantRemoved(object sender, EventArgs e) 
        {
            if (TmxTestConstantRemoved != null)
                TmxTestConstantRemoved(sender, e);
        }
        
        internal static void OnTmxTestConstantChanged(object sender, EventArgs e) 
        {
            if (TmxTestConstantChanged != null)
                TmxTestConstantChanged(sender, e);
        }
        
        internal static void OnTmxTestCaseAdded(object sender, EventArgs e) 
        {
            if (TmxTestCaseAdded != null)
                TmxTestCaseAdded(sender, e);
        }
        
        internal static void OnTmxTestCaseRemoved(object sender, EventArgs e) 
        {
            if (TmxTestCaseRemoved != null)
                TmxTestCaseRemoved(sender, e);
        }
        
        internal static void OnTmxTestCaseChanged(object sender, EventArgs e) 
        {
            if (TmxTestCaseChanged != null)
                TmxTestCaseChanged(sender, e);
        }
        
        // ------------------ Methods ----------------------------
        public static void ResetData()
        {
            // 20141014
            // TestSuites.Clear();
            if (null != TestSuites) TestSuites.Clear();
            CurrentTestResult = null;
            CurrentTestScenario = null;
            CurrentTestSuite = null;
            InitTestData();
        }
        
        public static void CleanData()
        {
            // 20141014
            if (null != TestSuites) {
                foreach (var suite in TestSuites) {
                    // 20141014
                    if (null != suite.TestScenarios) {
                        foreach (var scenario in suite.TestScenarios) {
                            scenario.TestResults.Clear();
                            scenario.enStatus = TestScenarioStatuses.NotTested;
                        }
                    }
                    suite.enStatus = TestSuiteStatuses.NotTested;
                }
            }
            CurrentTestResult = null;
            CurrentTestScenario = null;
            CurrentTestSuite = null;
        }
        
        internal static void AddTestResult(string closingTestResultName, // previousTestResultName
                                           string closingTestResultId, // previousTestResultId
                                           bool? passed,
                                           bool isKnownIssue,
                                           bool generateNextResult,
                                           InvocationInfo myInvocation,
                                           ErrorRecord error,
                                           string testResultDescription,
                                           TestResultOrigins origin,
                                           bool skipAutomatic)
        {
            //TestData.InitCurrentTestScenario();
            
            bool generated = TestResultOrigins.Automatic == origin;
            
            ITestResult currentTestResult;
            if (null != TestData.CurrentTestResult) {
                currentTestResult = TestData.CurrentTestResult;
            } else {
                currentTestResult =
                    new TestResult(
                        TestData.CurrentTestScenario.Id,
                        TestData.CurrentTestSuite.Id);
            }
            
            if (string.IsNullOrEmpty(currentTestResult.Name)) {
            	
//                if (closingTestResultName != null &&
//                    closingTestResultName != string.Empty &&
//                    closingTestResultName.Length > 0 &&
//                    TestData.CurrentTestResult != null && 
//                     closingTestResultName != TestData.CurrentTestResult.Name) {

                if (!string.IsNullOrEmpty(closingTestResultName) &&
                    ((TestData.CurrentTestResult != null && 
                      closingTestResultName != TestData.CurrentTestResult.Name) ||
                      null == TestData.CurrentTestResult)) {
					
                    currentTestResult.Name = closingTestResultName;
                } else {
                    currentTestResult.Name = "generated test result name";
                }
                
            } else {
                // the current test result is a result that was preset
                // nothing to do
            }

            // setting test result's origin
            if (generated) {
                currentTestResult.SetOrigin(TestResultOrigins.Automatic);
            } else {
                //currentTestResult.SetOrigin(TestResultOrigins.Logical);
                currentTestResult.SetOrigin(origin);
            }

            if (string.IsNullOrEmpty(currentTestResult.Id)) {
            	
//                if (closingTestResultId != null &&
//                    closingTestResultId != string.Empty &&
//                    closingTestResultId.Length > 0 &&
//                    null != TestData.CurrentTestResult &&
//                    closingTestResultId != TestData.CurrentTestResult.Id) {
                if (!string.IsNullOrEmpty(closingTestResultId) &&
                    ((null != TestData.CurrentTestResult &&
                      closingTestResultId != TestData.CurrentTestResult.Id) ||
                      null == TestData.CurrentTestResult)) {
					
                    currentTestResult.Id = closingTestResultId;
                } else {
                    currentTestResult.Id = GetTestResultId();
                }
            } else {
                // there already was the Id
                // nothing to do
            }
            
            if (passed != null) {
                if ((bool)passed) {
                    currentTestResult.enStatus = TestResultStatuses.Passed;
                } else {
                    currentTestResult.enStatus = TestResultStatuses.Failed;
                }

                if (isKnownIssue) {
                    currentTestResult.enStatus = TestResultStatuses.KnownIssue;
                }
            } else {
                //currentTestResult.enStatus = TestResultStatuses.NotTested;
                
                // if there were no errors during the test case execution
                // it is marked as passed
                bool noErrors = true;
                if (null == currentTestResult.Error &&
                    TestResultStatuses.Failed != currentTestResult.enStatus &&
                    TestResultStatuses.KnownIssue != currentTestResult.enStatus) {
                	
                    //foreach (ITestResultDetail detail in currentTestResult.Details) {
                    foreach (ITestResultDetail detail in currentTestResult.Details) {
                        if (null == ((TestResultDetail)detail).ErrorDetail) {
                            noErrors = false;
                            break;
                        }
                    }
                }
                //if (noErrors) {
                if (noErrors && null != passed) {
                    currentTestResult.enStatus = TestResultStatuses.Passed;
                }

            }
            
            if (!string.IsNullOrEmpty(testResultDescription)) {
                currentTestResult.Description = testResultDescription;
            }
            
            if (generated)
                currentTestResult.SetGenerated();
            
            if (TmxHelper.TestCaseStarted == DateTime.MinValue)
                TmxHelper.TestCaseStarted = DateTime.Now;

            currentTestResult.SetNow();
            currentTestResult.SetTimeSpent(
                (currentTestResult.Timestamp - TmxHelper.TestCaseStarted).TotalSeconds);
            
            TestData.CurrentTestResult = currentTestResult;
            
            try {
                TestData.CurrentTestResult.PlatformId = TestData.CurrentTestScenario.PlatformId;
                    // 20130612
                    //TestData.CurrentTestPlatform.Id;
            }
            catch {}
            
            if (null != TestData.CurrentTestScenario.TestResults[TestData.CurrentTestScenario.TestResults.Count - 1] &&
                TestResultOrigins.Logical == TestData.CurrentTestScenario.TestResults[TestData.CurrentTestScenario.TestResults.Count - 1].Origin &&
                TestData.CurrentTestScenario.TestResults[TestData.CurrentTestScenario.TestResults.Count - 1] != TestData.CurrentTestResult &&
                !string.IsNullOrEmpty(TestData.CurrentTestScenario.TestResults[TestData.CurrentTestScenario.TestResults.Count - 1].Name)) {
                
                TmxHelper.TestCaseStarted = DateTime.Now;
                TestData.CurrentTestScenario.TestResults.Add(new TestResult(TestData.CurrentTestScenario.Id, TestData.CurrentTestSuite.Id));
            }

            /*
            if (null != TestData.CurrentTestScenario.TestResults[TestData.CurrentTestScenario.TestResults.Count - 1] &&
                TestResultOrigins.Logical == TestData.CurrentTestScenario.TestResults[TestData.CurrentTestScenario.TestResults.Count - 1].Origin &&
                TestData.CurrentTestScenario.TestResults[TestData.CurrentTestScenario.TestResults.Count - 1] != TestData.CurrentTestResult &&
                null != TestData.CurrentTestScenario.TestResults[TestData.CurrentTestScenario.TestResults.Count - 1].Name &&
                0 < TestData.CurrentTestScenario.TestResults[TestData.CurrentTestScenario.TestResults.Count - 1].Name.Length) {
                
                TmxHelper.TestCaseStarted =
                    System.DateTime.Now;
                TestData.CurrentTestScenario.TestResults.Add(new TestResult(TestData.CurrentTestScenario.Id, TestData.CurrentTestSuite.Id));
               
            }
            */

            TestData.CurrentTestScenario.TestResults[TestData.CurrentTestScenario.TestResults.Count - 1] = 
                TestData.CurrentTestResult;
            
            #region Test Result's PowerShell data
            if (myInvocation != null) {
                TestData.CurrentTestResult.SetScriptName(TmxHelper.GetScriptName(myInvocation));
                TestData.CurrentTestResult.SetLineNumber(TmxHelper.GetScriptLineNumber(myInvocation));
                TestData.CurrentTestResult.SetPosition(TmxHelper.GetPipelinePosition(myInvocation));
                // 20130329
                try {
                    
                    if (((bool)passed && Preferences.LogScriptName_Passed) || (!(bool)passed && Preferences.LogScriptName_Failed)) {
                        
                        TestData.CurrentTestResult.Code += 
                            "script name: " + 
                            TestData.CurrentTestResult.ScriptName;
    
                    }
                }
                catch {}
                try {
                    
                    if (((bool)passed && Preferences.LogLineNumber_Passed) || (!(bool)passed && Preferences.LogLineNumber_Failed)) {
                        
                        TestData.CurrentTestResult.Code +=
                            "\r\nline number: " +
                            TestData.CurrentTestResult.LineNumber.ToString();
    
                    }
                }
                catch {}
                try {
                    
                    if (((bool)passed && Preferences.LogCode_Passed) || (!(bool)passed && Preferences.LogCode_Failed)) {
                        
                        TestData.CurrentTestResult.Code +=
                            "\r\ncode:\r\n" +
                            myInvocation.Line;
    
                    }
                }
                catch {}
            }
            
            if (error != null) {

                TestData.CurrentTestResult.SetError(error);

            }
            #endregion Test Result's PowerShell data
            
            var sourceTestResult = TestData.CurrentTestResult;
            SetScenarioStatus(skipAutomatic);
            SetSuiteStatus(skipAutomatic);
            
            if (generateNextResult) {
                // write current time
                TmxHelper.TestCaseStarted = DateTime.Now;
                TestData.CurrentTestScenario.TestResults.Add(
                    new TestResult(
                       TestData.CurrentTestScenario.Id,
                       TestData.CurrentTestScenario.SuiteId));
                TestData.CurrentTestResult = 
                    TestData.CurrentTestScenario.TestResults[TestData.CurrentTestScenario.TestResults.Count - 1];
            } else {
                // write zero time
                TmxHelper.TestCaseStarted = DateTime.MinValue;
                TestData.CurrentTestResult = null;
            }
            
            if (Preferences.Storage) {
    			using (var session = StorageHelper.SessionFactory.OpenSession())
                {
                    session.Save(TestData.CurrentTestResult);
    			}
            }

            OnTmxNewTestResultClosed(sourceTestResult, null);
        }
        
        internal static void InitTestData()
        {
            TmxHelper.TestCaseStarted = DateTime.Now;
            
            if (null == TestData.TestSuites)
                // 20140720
                // TestData.TestSuites = new List<TestSuite>();
                TestData.TestSuites = new List<ITestSuite>();
            if (null == TestData.TestPlatforms)
                // 20140720
                // TestData.TestPlatforms = new List<TestPlatform>();
                TestData.TestPlatforms = new List<ITestPlatform>();
            
            // check that at least one platform exists
			if (0 == TestData.TestPlatforms.Count)
				AddDefaultPlatform();
            /*
            if (0 == TestData.TestPlatforms.Count) {
                TmxHelper.NewTestPlatform(
            		// 20140716
                    // "autogenerated",
                    TestData.Autogenerated,
                    GetTestPlatformId(),
                    "This platform has been created automatically",
					Environment.OSVersion.Platform.ToString(),
					Environment.OSVersion.VersionString,
					Environment.GetEnvironmentVariable("PROCESSOR_ARCHITECTURE"),
                    "");
            }
            */
            
            // check that at least one suite exists
            if (TestData.TestSuites.Count == 0) {
                TmxHelper.NewTestSuite(
            		// 20140716
                    // "autogenerated",
                    TestData.Autogenerated,
                    GetTestSuiteId(),
                    TestData.CurrentTestPlatform.Id,
                    "This suite has been created automatically",
                    null,
                    null);
            }
            
            // check that at least one scenario exists
            if (TestData.CurrentTestSuite.TestScenarios.Count == 0) {
				CreateAutogeneratedTestScenario();
            }
        }
        
		internal static void AddDefaultPlatform()
		{
			TmxHelper.NewTestPlatform(
				TestData.DefaultPlatformName,
				TestData.DefaultPlatformId,
				"This platform has been created automatically",
				Environment.OSVersion.Platform.ToString(),
				Environment.OSVersion.VersionString,
				Environment.GetEnvironmentVariable("PROCESSOR_ARCHITECTURE"), "");
		}
		
		internal static string GetDefaultPlatformId()
		{
		    return TestData.GetTestPlatform(TestData.DefaultPlatformName, TestData.DefaultPlatformId).Id;
		}
		
		internal static void CreateAutogeneratedTestScenario()
		{
		    var dataObject = new AddScenarioCmdletBaseDataObject {
		        Name = TestData.Autogenerated,
		        Id = GetTestScenarioId(),
		        Description = "This scenario has been created automatically",
		        TestSuiteName = TestData.CurrentTestSuite.Name,
		        TestSuiteId = TestData.CurrentTestSuite.Id
		    };
			TmxHelper.AddTestScenario(dataObject);
		}
		
        internal static void InitCurrentTestSuite()
        {
            if (null == TestData.CurrentTestSuite) {
                
                if (null == TestData.TestSuites) {
                    
                    TestData.InitTestData();
                } else {
                    
                    if (0 == TestData.TestSuites.Count) {
                        
                        TestData.AddTestSuite(
                            TestData.Autogenerated,
                            TestData.GetTestSuiteId(),
                            TestData.CurrentTestPlatform.Id,
                            string.Empty,
                            null,
                            null);
                    }
                }
                
                TestData.CurrentTestSuite =
                    TestData.TestSuites[TestData.TestSuites.Count - 1];
            }
        }
        
        internal static void InitCurrentTestScenario()
        {
            if (null == TestData.CurrentTestSuite)
                TestData.InitCurrentTestSuite();
            
            if (null == TestData.CurrentTestScenario) {
                
                if (null == TestData.CurrentTestSuite.TestScenarios)
                    // that's impossible...
                    TestData.CurrentTestSuite.TestScenarios = new List<ITestScenario>();
				                
                if (0 == TestData.CurrentTestSuite.TestScenarios.Count) {
                    
                    TestData.AddTestScenario(
                        TestData.CurrentTestSuite,
                        TestData.Autogenerated,
                        TestData.GetTestScenarioId(),
                        string.Empty,
                        string.Empty,
                        string.Empty,
                        TestData.CurrentTestPlatform.Id,
                        null,
                        null);
                }
                
                TestData.CurrentTestScenario =
                    (TestScenario)TestData.CurrentTestSuite.TestScenarios[
                        TestData.CurrentTestSuite.TestScenarios.Count - 1];
            }
        }
        
        internal static TestStat RefreshScenarioStatistics(ITestScenario scenario, bool skipAutomatic)
        {
            var ts = new TestStat();

            if (null != scenario.TestResults && 0 < scenario.TestResults.Count) {
                
                ts.All = scenario.TestResults.Count;
                foreach (var tr in scenario.TestResults) {
                    
                    if (skipAutomatic) {
                        if (TestResultOrigins.Automatic == tr.Origin) {
                            continue;
                        }
                    }
                    
                    if (tr.enStatus == TestResultStatuses.Passed ||
                        tr.enStatus == TestResultStatuses.KnownIssue) {
                        ts.Passed++;
                        if (tr.enStatus == TestResultStatuses.KnownIssue){
                            ts.PassedButWithBadSmell++;
                        }
                    }
                    if (tr.enStatus == TestResultStatuses.Failed) {
                        ts.Failed++;
                    }
                    ts.TimeSpent += tr.TimeSpent;
                }
            }
            ts.NotTested = 
                ts.All - 
                ts.Passed -
                ts.Failed;
            scenario.Statistics = ts;
            return ts;
        }
        
        internal static TestStat RefreshSuiteStatistics(ITestSuite suite, bool skipAutomatic)
        {
            var ts = new TestStat();
            foreach (var tsc in suite.TestScenarios) {
                
                //RefreshScenarioStatistics(tsc);
                RefreshScenarioStatistics(tsc, skipAutomatic);
                ts.All += tsc.Statistics.All;
                ts.Passed += tsc.Statistics.Passed;
                ts.Failed += tsc.Statistics.Failed;
                ts.NotTested += tsc.Statistics.NotTested;
                ts.TimeSpent += tsc.Statistics.TimeSpent;
                ts.PassedButWithBadSmell += tsc.Statistics.PassedButWithBadSmell;
            }
            suite.Statistics = ts;
            return ts;
        }
        
        internal static void SetScenarioStatus(bool skipAutomatic)
        {
            if (null == TestData.CurrentTestScenario) {
                TestData.InitCurrentTestScenario();
            }

            int counterPassedResults = 0;
            int counterKnownIssueResults = 0;
            
            if (null != TestData.CurrentTestScenario &&
                null != TestData.CurrentTestScenario.TestResults &&
                0 < TestData.CurrentTestScenario.TestResults.Count) {
                foreach (var testResult in TestData.CurrentTestScenario.TestResults) {

                    switch (testResult.enStatus) {
                        case TestResultStatuses.Passed:
                            counterPassedResults++;
                            // 20131001
                            //TestData.CurrentTestScenario.enStatus = TestScenarioStatuses.Passed;
                            if (TestScenarioStatuses.Failed != TestData.CurrentTestScenario.enStatus)
                                TestData.CurrentTestScenario.enStatus = TestScenarioStatuses.Passed;
                            break;
                        case TestResultStatuses.Failed:
                            TestData.CurrentTestScenario.enStatus = TestScenarioStatuses.Failed;
                            return;
                            //break;
                        case TestResultStatuses.NotTested:
                            
                            break;
                        case TestResultStatuses.KnownIssue:
                            counterKnownIssueResults++;
                            // 20131001
                            //TestData.CurrentTestScenario.enStatus = TestScenarioStatuses.Passed;
                            if (TestScenarioStatuses.Failed != TestData.CurrentTestScenario.enStatus)
                                TestData.CurrentTestScenario.enStatus = TestScenarioStatuses.Passed;
                            break;
                        default:
                            throw new Exception("Invalid value for TestResultStatuses");
                    }
                }
                if (0 == counterPassedResults && 0 < counterKnownIssueResults)
                    TestData.CurrentTestScenario.enStatus = TestScenarioStatuses.KnownIssue;
            
                // set statistics
                RefreshScenarioStatistics(TestData.CurrentTestScenario, skipAutomatic);
            }
        }
        
        internal static void SetSuiteStatus(bool skipAutomatic)
        {
            if (null == TestData.CurrentTestSuite)
                TestData.InitCurrentTestScenario();
            
            TestData.SetScenarioStatus(skipAutomatic);
            
            int counterPassedResults = 0;
            int counterKnownIssueResults = 0;
            
            if (TestData.CurrentTestSuite != null && 
                0 < TestData.CurrentTestSuite.TestScenarios.Count) {
                
                foreach (var scenario in TestData.CurrentTestSuite.TestScenarios) {
                    
                    switch (scenario.enStatus) {
                        case TestScenarioStatuses.Passed:
                            counterPassedResults++;
                            // 20131001
                            //TestData.CurrentTestSuite.enStatus = TestSuiteStatuses.Passed;
                            if (TestSuiteStatuses.Failed != TestData.CurrentTestSuite.enStatus)
                                TestData.CurrentTestSuite.enStatus = TestSuiteStatuses.Passed;
                            break;
                        case TestScenarioStatuses.Failed:
                            TestData.CurrentTestSuite.enStatus = TestSuiteStatuses.Failed;
                            return;
                            //break;
                        case TestScenarioStatuses.NotTested:
                            break;
                        case TestScenarioStatuses.KnownIssue:
                            counterKnownIssueResults++;
                            // 20131001
                            //TestData.CurrentTestSuite.enStatus = TestSuiteStatuses.Passed;
                            if (TestSuiteStatuses.Failed != TestData.CurrentTestSuite.enStatus)
                                TestData.CurrentTestSuite.enStatus = TestSuiteStatuses.Passed;
                            break;
                        default:
                            // 20130428
                            //throw new Exception("Invalid value for TestScenarioStatuses");
                            // as Not Tested
                            break;
                    }
                }
            	
                if (0 == counterPassedResults && 0 < counterKnownIssueResults)
                    TestData.CurrentTestSuite.enStatus = TestSuiteStatuses.KnownIssue;
                
                // set statistics
                RefreshSuiteStatistics(TestData.CurrentTestSuite, skipAutomatic);
            }
        }
        
        internal static string GetTestPlatformId()
        {
            string result = string.Empty;            
            
            // read the last id used and generate a new one
            int testNumber = TestData.TestPlatforms.Count; // + 1;
            bool noValidId = true;
            do {
                foreach (var Platform in TestData.TestPlatforms) {
                    if (Platform.Id == testNumber.ToString()) {
                        testNumber++;
                    }
                }
                noValidId = false;
                result = testNumber.ToString();
            } while (noValidId);
            
            return result;
        }
        
        internal static string GetTestSuiteId()
        {
            string result = string.Empty;            
            
            // read the last id used and generate a new one
            int testNumber = 
                TestData.TestSuites.Count; // + 1;
            bool noValidId = true;
            do {
                foreach (var suite in TestData.TestSuites) {
                    if (suite.Id == testNumber.ToString()) {
                        testNumber++;
                    }
                }
                noValidId = false;
                result = testNumber.ToString();
            } while (noValidId);
            
            return result;
        }
        
        internal static string GetTestScenarioId()
        {
            string result = string.Empty;            
            
            int scNumber = 1;
            if (null != TestData.TestSuites && 0 < TestData.TestSuites.Count) {

                if (null != TestData.CurrentTestSuite.TestScenarios) {

                    // read the last used id and generate a new one
                    scNumber = 
                        TestData.CurrentTestSuite.TestScenarios.Count; // + 1;
                    bool noValidId = true;

                    do {
                        foreach (var scenario in TestData.CurrentTestSuite.TestScenarios) {

                            if (scenario.Id == scNumber.ToString()) {

                                scNumber++;
                            }
                        }
                        noValidId = false;
                        
                        if (0 == scNumber) {
                            scNumber++;
                        }
                        
                        result = scNumber.ToString();
                    } while (noValidId);
                    
                    
                    
                } else {

                    result = scNumber.ToString();
                }
                
                
            } else {

                result = scNumber.ToString();
            }
            
            return result;
        }
        
        internal static string GetTestResultId()
        {
            string result = string.Empty;
            
            int testNumber = 0;
            if (null != TestData.TestSuites && 0 < TestData.TestSuites.Count) {
                
                if (null != TestData.CurrentTestScenario) {
                    
                    if (null != TestData.CurrentTestScenario.TestResults) {
                        
                        // read the last used id and generate a new one
                        testNumber = 
                            TestData.CurrentTestScenario.TestResults.Count; // + 1;
                        bool noValidId = true;
                        do {
                            foreach (var testResult in TestData.CurrentTestScenario.TestResults) {
                                if (testResult.Id == testNumber.ToString()) {
                                    testNumber++;
                                }
                            }
                            noValidId = false;
                            result = testNumber.ToString();
                        } while (noValidId);
                        
                    } else {
                        
                        result = testNumber.ToString();
                        
                    }
                    
                } else {
                    
                    result = testNumber.ToString();
                    
                }
            } else {
                
                result = testNumber.ToString();
                
            }
            
            return result;
        }
        
//        internal static bool AttachTestResultCode()
//        {
//            bool result = false;
//            
//            
//            
//            return result;
//        }
        
        internal static void AddTestResultTextDetail(ITestResultDetailCmdletBaseDataObject cmdlet, object detail)
        {
            ITestResultDetail testResultDetail = 
                new TestResultDetail();
            
            testResultDetail.AddTestResultDetail(
                TestResultDetailTypes.Comment,
                detail.ToString());
            CurrentTestResult.Details.Add(testResultDetail);
            
            testResultDetail.DetailStatus = cmdlet.TestResultStatus;
            
            switch (cmdlet.TestResultStatus) {
                case TestResultStatuses.Failed:
					if (TestResultStatuses.KnownIssue != CurrentTestResult.enStatus)
						CurrentTestResult.enStatus = TestResultStatuses.Failed;
                    break;
                case TestResultStatuses.Passed:
                    if (TestResultStatuses.KnownIssue != CurrentTestResult.enStatus &&
                    TestResultStatuses.Failed != CurrentTestResult.enStatus)
                        CurrentTestResult.enStatus = TestResultStatuses.Passed;
                    break;
                case TestResultStatuses.NotTested:
                    // nothing to do
                    break;
                case TestResultStatuses.KnownIssue:
                    CurrentTestResult.enStatus = TestResultStatuses.KnownIssue;
                    break;
                default:
//                    cmdlet.WriteVerbose(cmdlet, "TestResultStatus = ????");
//                    cmdlet.WriteVerbose(cmdlet, cmdlet.TestResultStatus.ToString());
                	break;
            }
            
            OnTmxNewTestResultDetailAdded(testResultDetail, null);
            
            if (cmdlet.Finished) {
                
                TmxHelper.TestCaseStarted = DateTime.Now;
                
                // 20130621                
//                TestData.CurrentTestScenario.TestResults.Add(new TestResult(TestData.CurrentTestScenario.Id, TestData.CurrentTestSuite.Id));
//                TestData.CurrentTestScenario.TestResults[TestData.CurrentTestScenario.TestResults.Count - 1] =
//                    TestData.CurrentTestResult;
                // 20130621
                ITestResult newTestResult = new TestResult(TestData.CurrentTestScenario.Id, TestData.CurrentTestSuite.Id);
                if (TestData.CurrentTestResult == TestData.CurrentTestScenario.TestResults[TestData.CurrentTestScenario.TestResults.Count - 1]) {
                    // autogeneration + Close-TmxTestResult
                    TestData.CurrentTestScenario.TestResults.Add(newTestResult);
                    TestData.CurrentTestResult = TestData.CurrentTestScenario.TestResults[TestData.CurrentTestScenario.TestResults.Count - 1];
                } else {
                    // Set-TmxCurrentTestResult + any closing
                    TestData.CurrentTestScenario.TestResults.Add(TestData.CurrentTestResult);
                    TestData.CurrentTestResult = newTestResult;
                }
            }
        }
        
        internal static void AddTestResultErrorDetail(ErrorRecord detail)
        {
            var testResultDetail = new TestResultDetail();
            
            testResultDetail.AddTestResultDetail(
                TestResultDetailTypes.ErrorRecord,
                detail);
            CurrentTestResult.Details.Add(testResultDetail);
        }
        
        internal static void AddTestResultScreenshotDetail(object detail)
        {
            var testResultDetail = new TestResultDetail();
            
            testResultDetail.AddTestResultDetail(
                TestResultDetailTypes.Screenshot,
                detail.ToString());
            CurrentTestResult.Details.Add(testResultDetail);
            CurrentTestResult.SetScreenshot(detail.ToString());
        }
        
        internal static bool AddTestPlatform(
            string testPlatformName,
            string testPlatformId,
            string testPlatformDesctiption,
            string testPlatformOS,
            string testPlatformVersion,
            string testPlatformArchitecture,
            string testPlatformLanguage)
		{
			bool result = false;
            
			if (string.IsNullOrEmpty(testPlatformId))
				testPlatformId = GetTestPlatformId();
            
			if (null != GetTestPlatform(testPlatformName, testPlatformId))
                // the suite requested won't be duplicated, exit
                return false;
            
			TestPlatforms.Add(new TestPlatform(testPlatformName, testPlatformId));
			if (!string.IsNullOrEmpty(testPlatformDesctiption))
				TestData.TestPlatforms[TestPlatforms.Count - 1].Description = testPlatformDesctiption;
            
			TestData.TestPlatforms[TestPlatforms.Count - 1].OperatingSystem = testPlatformOS;
			TestData.TestPlatforms[TestPlatforms.Count - 1].Version = testPlatformVersion;
			TestData.TestPlatforms[TestPlatforms.Count - 1].Architecture = testPlatformArchitecture;
			TestData.TestPlatforms[TestPlatforms.Count - 1].Language = testPlatformLanguage;
            
			TestData.CurrentTestPlatform = 
                TestData.TestPlatforms[TestPlatforms.Count - 1];
            
			if (TestData.CurrentTestPlatform != null)
				OnTmxNewTestPlatformCreated(TestData.CurrentTestPlatform, new EventArgs()); //null);
            
			if (Preferences.Storage) {
				using (var session = StorageHelper.SessionFactory.OpenSession()) {
					session.Save(TestData.CurrentTestPlatform);
				}
			}
            
			result = true;
			return result;
		}
        
        internal static bool AddTestSuite(string testSuiteName, 
                                          string testSuiteId,
                                          string testPlatformId,
                                          string testSuiteDesctiption,
                                          ScriptBlock[] testSuiteBeforeScenario,
                                          ScriptBlock[] testSuiteAfterScenario)
		{
			bool result = false;
            
			if (string.IsNullOrEmpty(testSuiteId))
				testSuiteId = GetTestSuiteId();
            
			if (null != GetTestSuite(testSuiteName, testSuiteId, testPlatformId))
                // the suite requested won't be duplicated, exit
                return false;
            
			// removing the first (autogenerated) suite
			try {
				// 20140716
				// if (1 == TestData.TestSuites.Count && "autogenerated" == TestData.TestSuites[0].Name &&
				// 	   1 == TestData.TestSuites[0].TestScenarios.Count && "autogenerated" == TestData.TestSuites[0].TestScenarios[0].Name &&
				if (1 == TestData.TestSuites.Count && TestData.Autogenerated == TestData.TestSuites[0].Name &&
				                1 == TestData.TestSuites[0].TestScenarios.Count && TestData.Autogenerated == TestData.TestSuites[0].TestScenarios[0].Name &&
				                1 == TestData.TestSuites[0].TestScenarios[0].TestResults.Count && TestResultOrigins.Automatic == TestData.TestSuites[0].TestScenarios[0].TestResults[0].Origin) {
                    
					TestData.TestSuites.RemoveAt(0);
				}
			} catch {
			}
            
			// set time spent on the previous suite
			if (null != TestData.CurrentTestSuite) {
                
				if (DateTime.MinValue != TestData.CurrentTestSuite.Timestamp) {
                    
					TestData.CurrentTestSuite.SetTimeSpent(
						TestData.CurrentTestSuite.TimeSpent +=
                        (DateTime.Now - TestData.CurrentTestSuite.Timestamp).TotalSeconds);
                    
					TestData.CurrentTestSuite.Timestamp = DateTime.MinValue;
				}
			}
            
			TestSuites.Add(new TestSuite(testSuiteName, testSuiteId));
			if (!string.IsNullOrEmpty(testSuiteDesctiption))
				TestData.TestSuites[TestSuites.Count - 1].Description = testSuiteDesctiption;
            
			TestData.CurrentTestSuite = TestData.TestSuites[TestSuites.Count - 1];
            
			if (TestData.CurrentTestSuite != null) {
                
				TestData.CurrentTestSuite.PlatformId = !string.IsNullOrEmpty(testPlatformId) ? testPlatformId : TestData.CurrentTestPlatform.Id;
				TestData.CurrentTestSuite.BeforeScenario = testSuiteBeforeScenario;
				TestData.CurrentTestSuite.AfterScenario = testSuiteAfterScenario;
                
				// set the initial time for this suite's session
				TestData.CurrentTestSuite.SetNow();
                
				OnTmxNewTestSuiteCreated(TestData.CurrentTestSuite, new EventArgs()); //null);
			}
            
			if (Preferences.Storage) {
				using (var session = StorageHelper.SessionFactory.OpenSession()) {
					session.Save(TestData.CurrentTestSuite);
				}
			}
			
			// 20140716
			if (0 == TestData.CurrentTestSuite.TestScenarios.Count)
				CreateAutogeneratedTestScenario();
			
			result = true;
			return result;
		}
        
        internal static ITestPlatform GetTestPlatform(string testPlatformName, string testPlatformId)
        {
            ITestPlatform result = null;
            
            if (!string.IsNullOrEmpty(testPlatformName)) {
                foreach (var testPlatform in TestPlatforms.Where(tp => tp.Name == testPlatformName)) {
                    
                    // id does not match
					if (!string.IsNullOrEmpty(testPlatformId) && testPlatformId != testPlatform.Id)
						continue;
                    
					if (!string.IsNullOrEmpty(testPlatformId) && testPlatformId == testPlatform.Id)
						result = testPlatform;
                    
					if (string.IsNullOrEmpty(testPlatformId))
						result = testPlatform;
                    
					if (result != null)
						return result;
                }
            }
            
			return !string.IsNullOrEmpty(testPlatformId) ? TestPlatforms.FirstOrDefault(testPlatform => testPlatform.Id == testPlatformId) : result;
            
            /*
            if (!string.IsNullOrEmpty(testPlatformId)) {
                // 20140902
//                foreach (var testPlatform in TestPlatforms.Where(testPlatform => testPlatform.Id == testPlatformId))
//                {
//                    result = testPlatform;
//                    return result;
//                }
                return TestPlatforms.FirstOrDefault(testPlatform => testPlatform.Id == testPlatformId);
            }
            */
            
        }
        
        internal static ITestSuite GetTestSuite(string testSuiteName, string testSuiteId, string testPlatformId)
        {
            ITestSuite result = null;
            
            if (!string.IsNullOrEmpty(testSuiteName)) {
                foreach (var testSuite in TestSuites.Where(ts => ts.Name == testSuiteName)) {
                    
                    // id does not match
					if (!string.IsNullOrEmpty(testSuiteId) && testSuiteId != testSuite.Id)
						continue;
                    // 20140902
//                    if (!string.IsNullOrEmpty(testSuiteId) && testSuiteId == testSuite.Id) {
//						if (testPlatformId != testSuite.PlatformId)
//							continue;
//						result = testSuite;
//					}
//                   
//                    if (string.IsNullOrEmpty(testSuiteId)) {
//						// does this code ever work?
//						if (testPlatformId != testSuite.PlatformId)
//							continue;
//						result = testSuite;
//					}
//                    
//					if (result != null)
//						return result;
                    // 20140922
					if (string.IsNullOrEmpty(testSuiteId) || testSuiteId == testSuite.Id)
					    // result = testSuite;
					    if (testPlatformId == testSuite.PlatformId)
					        result = testSuite;
				    if (null != result)
				       return result;
                }
            }
            
            if (!string.IsNullOrEmpty(testSuiteId)) {
                foreach (var testSuite in TestSuites) {
                    if (testSuite.Id == testSuiteId) {
                        
						if (testPlatformId != testSuite.PlatformId)
							continue;
						if (testSuiteName != testSuite.Name && !string.IsNullOrEmpty(testSuiteName))
							continue;
						result = testSuite;
						return result;
					}
                }
            }
            return result;
        }
        
internal static void dumpTestStructure(string strNumber)
{
//    try {
//        int tsCounter = TestData.TestSuites.Count;
//        int tscCounter = TestData.TestSuites[tsCounter - 1].TestScenarios.Count;
//        int trCounter = TestData.TestSuites[tsCounter - 1].TestScenarios[tscCounter - 1].TestResults.Count;
//        try { Console.WriteLine(strNumber + " TestData.TestSuites[tsCounter - 1].TestScenarios[tscCounter - 1].TestResults[trCounter - 1].Status = " + TestData.TestSuites[tsCounter - 1].TestScenarios[tscCounter - 1].TestResults[trCounter - 1].Status); } catch {}
//        try { Console.WriteLine(strNumber + " TestData.TestSuites[tsCounter - 1].TestScenarios[tscCounter - 2].TestResults[trCounter - 1].Status = " + TestData.TestSuites[tsCounter - 1].TestScenarios[tscCounter - 2].TestResults[trCounter - 1].Status); } catch {}
//        try { Console.WriteLine(strNumber + " TestData.CurrentTestSuite.TestScenarios[tscCounter44 - 1].TestResults[trCounter44 - 1].Status = " + TestData.CurrentTestSuite.TestScenarios[tscCounter - 1].TestResults[trCounter - 1].Status); } catch {}
//        try { Console.WriteLine(strNumber + " TestData.CurrentTestScenario.TestResults[trCounter44 - 1].Status = " + TestData.CurrentTestScenario.TestResults[trCounter - 1].Status); } catch {}
//        try { Console.WriteLine(strNumber + " TestData.CurrentTestResult.Status = " + TestData.CurrentTestResult.Status); } catch {}
//    } catch {}
}
        
        internal static bool AddTestCase(
            string testCaseName,
            string testCaseId,
            string testCaseDescription,
            string testSuiteName,
            string testSuiteId,
            string testScenarioName,
            string testScenarioId,
            string testPlatformId,
            ScriptBlock[] testCode)
        {
            bool result = false;
            
            var testSuite =
                TestData.GetTestSuite(
                    testSuiteName,
                    testSuiteId,
                    testPlatformId) ?? TestData.CurrentTestSuite;

            /*
            if (null == testSuite) { // ?? mistaken behavior ??
                
                testSuite = TestData.CurrentTestSuite;
            }
            */
            
            var testScenario =
                TestData.GetTestScenario(
                    testSuite,
                    testScenarioName,
                    testScenarioId,
                    testSuiteName,
                    testSuiteId,
                    testPlatformId);
            
            if (null == testScenario) { // ?? mistaken behavior ??
                
                testScenario = TestData.CurrentTestScenario;
            }
            
            var testCase =
                new TestCase(
                    testCaseName,
                    testCaseId);
            
            testCase.Description = testCaseDescription;
            testCase.TestCode = testCode;
			TestData.CurrentTestCase = testCase;
            
            try {
                
                testScenario.TestCases.Add(testCase);
                result = true;
            }
            catch (Exception eFailedToAdd) {
                throw eFailedToAdd;
                //result = false;
            }
            
            return result;
        }
        
        internal static bool AddTestScenario(ITestSuite testSuite,
                                             string testScenarioName,
                                             string testScenarioId,
                                             string testScenarioDescription,
                                             string testSuiteName,
                                             string testSuiteId,
                                             string testPlatformId,
                                             ScriptBlock[] testScenarioBeforeTest,
                                             ScriptBlock[] testScenarioAfterTest)
        {
            bool result = false;
            
            // clean up the last empty test result
            // in the previous scenario
            // if (TestData.CurrentTestScenario != null) {
            if (null != TestData.CurrentTestScenario) {
                
                if (TestData.CurrentTestScenario.TestResults.Count > 0) {
                    
                    if (TestData.CurrentTestScenario.TestResults[TestData.CurrentTestScenario.TestResults.Count - 1].Details.Count == 0 &&
                        TestData.CurrentTestScenario.TestResults[TestData.CurrentTestScenario.TestResults.Count - 1].Status == TestStateNotTested) {

                        TestData.CurrentTestScenario.TestResults.RemoveAt(TestData.CurrentTestScenario.TestResults.Count - 1);
                    }
                }
                
//                if ((null != TestData.CurrentTestResult.Name &&
//                     string.Empty != TestData.CurrentTestResult.Name) ||
//                    (0 < TestData.CurrentTestResult.Details.Count)) {
//                    //TmxHelper.TestCaseStarted =
//                    //    System.DateTime.Now;
//                    TestData.CurrentTestScenario.TestResults.Add(new TestResult(TestData.CurrentTestScenario.Id, TestData.CurrentTestSuite.Id));
//                    TestData.CurrentTestScenario.TestResults[TestData.CurrentTestScenario.TestResults.Count - 1] =
//                        TestData.CurrentTestResult;
//                }
            }
            
            // set time spent on the previous scenario
            if (null != TestData.CurrentTestScenario) {
            	
                if (DateTime.MinValue != TestData.CurrentTestScenario.Timestamp) {
                    
					TestData.CurrentTestScenario.SetTimeSpent(
						TestData.CurrentTestScenario.TimeSpent +=
                        (DateTime.Now - TestData.CurrentTestScenario.Timestamp).TotalSeconds);
					TestData.CurrentTestScenario.Timestamp = DateTime.MinValue;
                }
            }
            
            if (testSuite != null) {
                
                TestData.CurrentTestSuite = testSuite;
            } else if (!string.IsNullOrEmpty(testSuiteName)) {
                
                var testSuite2 = GetTestSuite(testSuiteName, testSuiteId, testPlatformId);
                if (testSuite2 != null) {
                    
                    TestData.CurrentTestSuite = testSuite2;
                }
            } else if (!string.IsNullOrEmpty(testSuiteId)) {
                
                var testSuite3 = GetTestSuite(testSuiteName, testSuiteId, testPlatformId);
                if (testSuite3 != null) {
                    
                    TestData.CurrentTestSuite = testSuite3;
                }
            }
            
            if (TestData.CurrentTestSuite == null) {
                
                return result;
            }
            
            // 20140716
            try {
            	// 20140716
                // if (1 == TestData.CurrentTestSuite.TestScenarios.Count && "autogenerated" == TestData.CurrentTestSuite.TestScenarios[0].Name &&
                // 20140718
                // if (1 == TestData.CurrentTestSuite.TestScenarios.Count && TestData.Autogenerated == TestData.CurrentTestSuite.TestScenarios[0].Name &&
                //     1 == TestData.CurrentTestSuite.TestScenarios[0].TestResults.Count && TestResultOrigins.Automatic == TestData.CurrentTestSuite.TestScenarios[0].TestResults[0].Origin) {
                if (1 <= TestData.CurrentTestSuite.TestScenarios.Count && TestData.Autogenerated == TestData.CurrentTestSuite.TestScenarios[0].Name &&
                    (0 == TestData.CurrentTestSuite.TestScenarios[0].TestResults.Count ||
                     1 == TestData.CurrentTestSuite.TestScenarios[0].TestResults.Count && TestResultOrigins.Automatic == TestData.CurrentTestSuite.TestScenarios[0].TestResults[0].Origin)) {
                    
            		TestData.CurrentTestSuite.TestScenarios.RemoveAt(0);
                }
            }
            catch {}
            
            if (string.IsNullOrEmpty(testScenarioId))
                testScenarioId = GetTestScenarioId();
            
//            if (null != TestData.TestSuites && 0 < TestData.TestSuites.Count) {
//                int lastTestSuiteNumber = TestData.TestSuites.Count - 1;
//
//                if (null != TestData.TestSuites[lastTestSuiteNumber].TestScenarios && 0 < TestData.TestSuites[lastTestSuiteNumber].TestScenarios.Count) {
//                    int lastTestScenarioNumber = TestData.TestSuites[lastTestSuiteNumber].TestScenarios.Count - 1;
//
//                    if (TestData.CurrentTestScenario.Name == TestData.TestSuites[lastTestSuiteNumber].TestScenarios[lastTestScenarioNumber].Name &&
//                        TestData.CurrentTestScenario.Id == TestData.TestSuites[lastTestSuiteNumber].TestScenarios[lastTestScenarioNumber].Id) {
//                        
//                        TestData.TestSuites[lastTestSuiteNumber].TestScenarios[lastTestScenarioNumber] = TestData.CurrentTestScenario;
//                    }
//                }
//            }
            
            TestData.CurrentTestSuite.TestScenarios.Add(
                new TestScenario(testScenarioName, testScenarioId, TestData.CurrentTestSuite.Id)); //testSuiteId));
            
            if (!string.IsNullOrEmpty(testScenarioDescription))
                TestData.CurrentTestSuite.TestScenarios[CurrentTestSuite.TestScenarios.Count - 1].Description = testScenarioDescription;
            
            TestData.CurrentTestScenario = 
                (TestScenario)TestData.CurrentTestSuite.TestScenarios[CurrentTestSuite.TestScenarios.Count - 1];
            
			TestData.CurrentTestScenario.BeforeTest = testScenarioBeforeTest;
			TestData.CurrentTestScenario.AfterTest = testScenarioAfterTest;
            
            TestData.CurrentTestScenario.PlatformId = !string.IsNullOrEmpty(testPlatformId) ? testPlatformId : TestData.CurrentTestSuite.PlatformId;
            
            // set the initial time for this scenario's session
            CurrentTestScenario.SetNow();
            
            OnTmxNewTestScenarioAdded(TestData.CurrentTestScenario, null);
            
            if (Preferences.Storage) {
                
    			using (var session = StorageHelper.SessionFactory.OpenSession())
                {
    			    
                    session.Save(TestData.CurrentTestScenario);
    			}
            }
            
            result = true;
            
            return result;
        }
        
        internal static ITestCase GetTestCase(
            ITestSuite testSuite,
            string testCaseName,
            string testCaseId,
            string testScenarioName,
            string testScenarioId,
            string testSuiteName,
            string testSuiteId,
            string testPlatformId)
        {
            ITestCase result = null;
            
            if (null == testSuite) {
                
                testSuite =
                    TestData.GetTestSuite(
                        testSuiteName,
                        testSuiteId,
                        testPlatformId);
                
            }
            
            if (null == testSuite)
                // better error description?
                return result;
            
            ITestScenario testScenario = null;
            
            if (null != testSuite) {
                
                testScenario =
                    TestData.GetTestScenario(
                        testSuite,
                        testScenarioName,
                        testScenarioId,
                        testSuiteName,
                        testSuiteId,
                        testPlatformId);
            }
            
            if (null == testScenario)
                // better error description?
                return result;
            
            if (null != testScenario && 0 < testScenario.TestCases.Count) {
                
                foreach (var testCase in testScenario.TestCases) {
                    
                    if ((testCaseName == testCase.TestCaseName &&
                        testCaseId == testCase.TestCaseId) ||
                        (string.IsNullOrEmpty(testCaseName) && testCaseId == testCase.TestCaseId) ||
                        (string.IsNullOrEmpty(testCaseId) && testCaseName == testCase.TestCaseName)){
                        
                        result = testCase;
                        break;
                    }
                }
            }
            
            return result;
        }
        
        internal static ITestScenario GetTestScenario(
            ITestSuite testSuite,
            string testScenarioName,
            string testScenarioId,
            string testSuiteName,
            string testSuiteId,
            string testPlatformId)
        {
            TestScenario result = null;

            if (testSuite != null) {
                TestData.CurrentTestSuite = testSuite;
            } else if (!string.IsNullOrEmpty(testSuiteName)) {
            /*
            } else if (testSuite == null && 
                        testSuiteName != string.Empty &&
                        testSuiteName != null) {
            */
                var testSuite2 = GetTestSuite(testSuiteName, testSuiteId, testPlatformId);
                if (testSuite2 != null)
                    TestData.CurrentTestSuite = testSuite2;
                
            } else if (!string.IsNullOrEmpty(testSuiteId)) {
            /*
            } else if (testSuite == null && 
                        testSuiteId != string.Empty &&
                        testSuiteId != null) {
            */
				var testSuite3 = GetTestSuite(testSuiteName, testSuiteId, testPlatformId);
                if (testSuite3 != null) {
                    TestData.CurrentTestSuite = testSuite3;
                }
            }
            
            if (TestData.CurrentTestSuite == null)
                return result;
            
            if (!string.IsNullOrEmpty(testScenarioName)) {
                
                foreach (ITestScenario testScenario in TestData.CurrentTestSuite.TestScenarios) {
                    
                    if (testScenario.Name == testScenarioName) {
                        
                        TestData.CurrentTestScenario = testScenario;
                        return TestData.CurrentTestScenario;
                    }
                }
            }
            
            if (!string.IsNullOrEmpty(testScenarioId)) {
            // if (testScenarioId != null && testScenarioId != string.Empty) {
                // 20140720
                // foreach (TestScenario testScenario in TestData.CurrentTestSuite.TestScenarios.Cast<TestScenario>().Where(testScenario => testScenario.Id == testScenarioId))
                foreach (ITestScenario testScenario in TestData.CurrentTestSuite.TestScenarios.Cast<ITestScenario>().Where(testScenario => testScenario.Id == testScenarioId))
                {
                    // 20130621
                    if (testPlatformId != testScenario.PlatformId) {
                        continue;
                    } else {
                        // 20130912
                        //if (testScenarioName != testScenario.Name) {
                        if (testScenarioName != testScenario.Name && !string.IsNullOrEmpty(testScenarioName)) {
                            continue;
                        } else {
                            TestData.CurrentTestScenario = testScenario;
                            return testScenario;
                        }
                    }
//                        TestData.CurrentTestScenario = testScenario;
//                        return testScenario;
                }
            }

            return result;
        }
        
        internal static IOrderedEnumerable<ITestSuite> SearchTestSuite(
            Func<ITestSuite, bool> query,
            Func<ITestSuite, object> ordering,
            bool desc)
        {
            IOrderedEnumerable<ITestSuite> result = null;
            
            if (desc) {
                result =
                    from suite in TestData.TestSuites
                    where query(suite)
                    orderby ordering(suite) descending
                    select suite;
            } else {
                result =
                    from suite in TestData.TestSuites
                    where query(suite)
                    orderby ordering(suite) ascending
                    select suite;
            }
            return result;
        }
        
        static IEnumerable<ITestScenario> getAllScenarios()
        {
            // 20140720
            // return TestData.TestSuites.SelectMany(suite => suite.TestScenarios.Cast<TestScenario>()).ToList();
            return TestData.TestSuites.SelectMany(suite => suite.TestScenarios).ToList();
        }
        
        internal static IOrderedEnumerable<ITestScenario> SearchTestScenario(
            Func<ITestScenario, bool> query,
            Func<ITestScenario, object> ordering,
            bool desc)
        {
            IOrderedEnumerable<ITestScenario> result = null;
            
            if (desc) {
                result =
                    from scenario in getAllScenarios()
                    where query(scenario)
                    orderby ordering(scenario) descending
                    select scenario;
            } else {
                result =
                    from scenario in getAllScenarios()
                    where query(scenario)
                    orderby ordering(scenario) ascending
                    select scenario;
            }
            
            return result;
        }
        
        static IEnumerable<ITestResult> getAllTestResults()
        {
            // 20140720
            // return (from suite in TestData.TestSuites from TestScenario scenario in suite.TestScenarios from TestResult testResult in scenario.TestResults select testResult).ToList();
            return (from suite in TestData.TestSuites from ITestScenario scenario in suite.TestScenarios from ITestResult testResult in scenario.TestResults select testResult).ToList();
            /*
            List<TestResult> result = new List<TestResult>();
            foreach (TestSuite suite in TestData.TestSuites)
            {
                foreach (TestScenario scenario in suite.TestScenarios)
                {
                    foreach (TestResult testResult in scenario.TestResults)
                    {
                        result.Add(testResult);
                    }
                }
            }
            return result;
            */
        }
        
        internal static IOrderedEnumerable<ITestResult> SearchTestResult(
            Func<ITestResult, bool> query,
            Func<ITestResult, object> ordering,
            bool desc)
        {
            IOrderedEnumerable<ITestResult> result = null;
            
            if (desc) {
                result =
                    from testResult in getAllTestResults()
                    where query(testResult)
                    orderby ordering(testResult) descending
                    select testResult;
            } else {
                result =
                    from testResult in getAllTestResults()
                    where query(testResult)
                    orderby ordering(testResult) ascending
                    select testResult;
            }
            return result;
        }
    }
}
