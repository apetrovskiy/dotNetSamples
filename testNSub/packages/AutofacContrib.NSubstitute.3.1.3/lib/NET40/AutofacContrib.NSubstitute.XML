<?xml version="1.0"?>
<doc>
    <assembly>
        <name>AutofacContrib.NSubstitute</name>
    </assembly>
    <members>
        <member name="T:AutofacContrib.NSubstitute.AutoSubstitute">
            <summary>
            Auto mocking container using <see cref="N:Autofac"/> and <see cref="N:AutofacContrib.NSubstitute"/>.
            </summary>
        </member>
        <member name="M:AutofacContrib.NSubstitute.AutoSubstitute.#ctor">
            <summary>
            Create an AutoSubstitute.
            </summary>
        </member>
        <member name="M:AutofacContrib.NSubstitute.AutoSubstitute.#ctor(System.Action{Autofac.ContainerBuilder})">
            <summary>
            Create an AutoSubstitute, but modify the <see cref="T:Autofac.ContainerBuilder"/> before building a container.
            </summary>
            <param name="builderModifier">Action to modify the <see cref="T:Autofac.ContainerBuilder"/></param>
        </member>
        <member name="M:AutofacContrib.NSubstitute.AutoSubstitute.Dispose">
            <summary>
            Cleans up the <see cref="T:Autofac.Core.Container"/>.
            </summary>
        </member>
        <member name="M:AutofacContrib.NSubstitute.AutoSubstitute.Resolve``1(Autofac.Core.Parameter[])">
            <summary>
            Resolve the specified type from the container.
            </summary>
            <typeparam name="T">The type to resolve</typeparam>
            <param name="parameters">Optional constructor parameters</param>
            <returns>The resolved object</returns>
        </member>
        <member name="M:AutofacContrib.NSubstitute.AutoSubstitute.Provide``2(Autofac.Core.Parameter[])">
            <summary>
            Register the specified implementation type to the container as the specified service type and resolve it using the given parameters.
            </summary>
            <typeparam name="TService">The type to register the implementation as</typeparam>
            <typeparam name="TImplementation">The implementation type</typeparam>
            <param name="parameters">Optional constructor parameters</param>
            <returns>The resolved <see cref="!:TService"/></returns>
        </member>
        <member name="M:AutofacContrib.NSubstitute.AutoSubstitute.Provide``1(``0)">
            <summary>
            Register the specified object to the container as the specified service type and resolve it.
            </summary>
            <typeparam name="TService">The type to register the object as</typeparam>
            <param name="instance">The object to register into the container</param>
            <returns>The instance resolved from container</returns>
        </member>
        <member name="M:AutofacContrib.NSubstitute.AutoSubstitute.SubstituteFor``1(System.Object[])">
            <summary>
            Registers to the container and returns a substitute for a given concrete class given the explicit constructor parameters.
            This is used for concrete classes where NSubstitutes won't be created by default by the container when using Resolve.
            For advanced uses consider using directly <see cref="M:NSubstitute.Substitute.For``1(System.Object[])"/> and then calling <see cref="M:AutofacContrib.NSubstitute.AutoSubstitute.Provide``1(``0)"/> so that type is used on dependencies for other Resolved types.
            </summary>
            <typeparam name="TService">The type to register and return a substitute for</typeparam>
            <param name="parameters">Optional constructor parameters</param>
            <returns>The instance resolved from the container</returns>
        </member>
        <member name="M:AutofacContrib.NSubstitute.AutoSubstitute.ResolveAndSubstituteFor``1(Autofac.Core.Parameter[])">
            <summary>
            Registers to the container and returns a substitute for a given concrete class using autofac to resolve the constructor parameters.
            This is used for concrete classes where NSubstitutes won't be created by default by the container when using Resolve.
            For advanced uses consider using directly <see cref="M:NSubstitute.Substitute.For``1(System.Object[])"/> and then calling <see cref="M:AutofacContrib.NSubstitute.AutoSubstitute.Provide``1(``0)"/> so that type is used on dependencies for other Resolved types.
            </summary>
            <typeparam name="TService">The type to register and return a substitute for</typeparam>
            <param name="parameters">Any constructor parameters that Autofac can't resolve automatically</param>
            <returns>The instance resolved from the container</returns>
        </member>
        <member name="P:AutofacContrib.NSubstitute.AutoSubstitute.Container">
            <summary>
            <see cref="T:Autofac.IContainer"/> that handles the component resolution.
            </summary>
        </member>
        <member name="T:AutofacContrib.NSubstitute.NSubstituteRegistrationHandler">
            <summary> Resolves unknown interfaces and Mocks using the <see cref="T:NSubstitute.Substitute"/>. </summary>
        </member>
        <member name="M:AutofacContrib.NSubstitute.NSubstituteRegistrationHandler.RegistrationsFor(Autofac.Core.Service,System.Func{Autofac.Core.Service,System.Collections.Generic.IEnumerable{Autofac.Core.IComponentRegistration}})">
            <summary>
            Retrieve a registration for an unregistered service, to be used
            by the container.
            </summary>
            <param name="service">The service that was requested.</param>
            <param name="registrationAccessor"></param>
            <returns>
            Registrations for the service.
            </returns>
        </member>
    </members>
</doc>
