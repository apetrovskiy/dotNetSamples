<#@ Template Language="C#" HostSpecific="True" Inherits="DynamicTransform" #>
<#@ Output Extension="cs" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Reflection" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Text.RegularExpressions" #> 
<#@ include file="WrapperCommon.cs.t4" #>//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a Scaffolder Wrapper Code Generator https://www.nuget.org/packages/Digitrish.WrapperGenerator/	
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//
//	   Date Created: <#= DateTime.Today.ToString("yyyy-MM-dd") #>
// </auto-generated>
//------------------------------------------------------------------------------
<#foreach(var item in DiscoverAllRequireNamespace(GetType(Model), true, true, true)){ #>
using <#= item #>;
<#}#>using <#= Model.Namespace #>.Wrapper.Contract;

namespace <#= Model.Namespace #>.Wrapper 
{
	public class <#= Model.ClassName #> : I<#= Model.ClassName #>
	{
		<#= GeneratePrivateInstanceForNonStatic(Model) #>
<#foreach(var item in GetConstructor(Model)){ WriteLine(""); #>
		public <#= Model.ClassName #>(<#= GenerateParameter(item.GetParameters(), true) #>) 
		{
			<#= GenerateClassIntanceVariable(Model) #> = new <#= GetType(Model).Name #>(<#= GenerateParameter(item.GetParameters(), false )#>);
		}
<#}#>
<#foreach(var item in GetProperties(Model)){ WriteLine(""); #>
		public <#= GenerateTypeName(item.PropertyType) #> <#= item.Name #> 
		{
		 	<# if(item.CanRead) { #>get { return <#= GenerateClassIntanceVariable(Model) #>.<#= item.Name #>; } <# } #>
			<# if(item.CanWrite) { WriteLine(""); #>
			set { <#= GenerateClassIntanceVariable(Model) #>.<#= item.Name #> = value; } <# } #>

		}
<#}#>
<#foreach(var item in GetMethods(Model)){ WriteLine(""); #>
		public <#= GenerateTypeName(item.ReturnType) #> <#= item.Name #>(<#= GenerateParameter(item.GetParameters(), true) #>) 
		{
			<#= GenerateTypeName(item.ReturnType) == "void" ? "" : "return " #><#= GenerateClassIntanceVariable(Model) #>.<#= item.Name #>(<#= GenerateParameter(item.GetParameters(), false) #>); 
		}
<#}#>
<#foreach(var item in GetEvents(Model)){ WriteLine(""); #>
		public event <#= GenerateTypeName(item.EventHandlerType) #> <#= item.Name #> 
		{
			add { <#= GenerateClassIntanceVariable(Model) #>.<#= item.Name #> += value; }
			remove { <#= GenerateClassIntanceVariable(Model) #>.<#= item.Name #> -= value; }
		}
<#}#>
	}
}
